#!/usr/bin/perl -w

($emacs_Time_stamp) = 'Time-stamp: <1998-01-30 11:35:48 johayek>' =~ m/<(.*)>/;

          $rcs_Id=(join(' ',((split(/\s/,'$Id: JHdiary 1.36 1998/01/30 11:36:40 johayek Exp $'))[1..6])));
#	$rcs_Date=(join(' ',((split(/\s/,'$Date: 1998/01/30 11:36:40 $'))[1..2])));
#     $rcs_Author=(join(' ',((split(/\s/,'$Author: johayek $'))[1])));
#	 $RCSfile=(join(' ',((split(/\s/,'$RCSfile: JHdiary $'))[1])));
#     $rcs_Source=(join(' ',((split(/\s/,'$Source: /Users/johayek/git-servers/github.com/JochenHayek/misc/diary/RCS/JHdiary $'))[1])));

# usage: 
#
#     ...

# purpose:
#
#     job_...

# in:

# out:

# requirements:

{
  use English;
  use FileHandle;
  use strict;

  &main;
}
#
sub main
{
  my($package,$filename,$line,$proc_name) = caller(0);

  my(%param) = @_;

  $return_value = 0;

  # described in:
  #	camel book / ch. 7: the std. perl lib. / lib. modules / Getopt::Long - ...

  use Getopt::Long;
  %options = ();

  $main::options{debug} = 1;

  printf STDERR ">%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};
  printf STDERR "=%s,%d,%s: %s=>{%s}\n",__FILE__,__LINE__,$proc_name
    ,'$rcs_Id',$rcs_Id
    if 0 && $main::options{debug};
  printf STDERR "=%s,%d,%s: %s=>{%s}\n",__FILE__,__LINE__,$proc_name
    ,'$emacs_Time_stamp',$emacs_Time_stamp
    if 0 && $main::options{debug};

  {
    # defaults for the main::options;
    
    $main::options{dry_run}		       = 0;
    $main::options{version}		       = 0;

    $main::options{job_tag_match}              = 0;
    $main::options{job_work_at}                = 0;
    $main::options{job_old_work_at}            = 0;
    $main::options{job_yearly_events}          = 0;

    $main::options{echo_the_source_p}		= 1;

    $main::options{this_year}			= 'yyyy';
  }

  my($result) =
    &GetOptions
      (\%main::options
     ##,'job_xxx|jxxx!'
       ,'job_tag_match!'
       ,'job_work_at!'
       ,'job_old_work_at!'
       ,'job_yearly_events!'

       ,'dry_run!'
       ,'version!'

       ,'company_tag=s'		# used by --job_work_at

       ,'tag=s'			# used by --job_tag_match

       ,'this_year|year=s'	# used by --job_yearly_events
       );
  $result || die 'GetMain::Options failed';

  #
  # example
  # =======
  #
  # JHdiary --job_tag_match --tag=travel
  #
  # JHdiary --job_work_at     --company_tag=derwent.co.uk 2>/dev/console
  # JHdiary --job_old_work_at --company_tag=derwent.co.uk 2>/dev/console
  #
  ##################################################
  # `--job_yearly_events' may only be applied to the region within diary,
  # where we find the yearly events;
  ##################################################
  # JHdiary --job_yearly_events --this_year=1997

  if($main::options{version})
    {
       printf STDERR "=%s,%d,%s: %s=>{%s}\n",__FILE__,__LINE__,$proc_name
	 ,'$rcs_Id',$rcs_Id
	 ;
       printf STDERR "=%s,%d,%s: %s=>{%s}\n",__FILE__,__LINE__,$proc_name
	 ,'$emacs_Time_stamp',$emacs_Time_stamp
	 ;
    }

  if   ($main::options{job_tag_match	}) { &job_tag_match    ; }
  elsif($main::options{job_work_at  	}) { &job_work_at      ; }
  elsif($main::options{job_old_work_at  }) { &job_old_work_at  ; }
  elsif($main::options{job_yearly_events}) { &job_yearly_events; }
  else
    {
      die "You did not give me a job.";
    }

  printf STDERR "=%s,%d,%s: %s=>{%s}\n",__FILE__,__LINE__,$proc_name
    ,'$return_value',$return_value
    if 0 && $main::options{debug};
  printf STDERR "<%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};
}
#
sub job_tag_match
{
  my($package,$filename,$line,$proc_name) = caller(0);

  my(%param) = @_;

  $return_value = 0;

  printf STDERR ">%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};

  if(!exists($main::options{tag}))
    {
      die "I need at least a tag.";
    }

  my($tag) = $main::options{tag};

  while (<>)
    {
      if( m/^[^\s]/ )
	{
	  $current_day = $_;
	}

      # extract the tag list;
      # check whether the tag specified is included;
      if( m/\[([^\]]+)\]/ )
	{
	  if ( $1 =~ m/\b$tag\b/ ) # `${tag}' disturbed the perl-mode-syntax
	    {
	      if( $printed_days{$current_day} )
		{
		}
	      else
		{
		  print         $current_day;
		  $printed_days{$current_day} = 1;
		}

	      print;
	    }
        }
    }

  printf STDERR "=%s,%d,%s: %s=>{%s}\n",__FILE__,__LINE__,$proc_name
    ,'$return_value',$return_value
    if 0 && $main::options{debug};
  printf STDERR "<%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};

  return $return_value;
}
#
sub job_work_at
{
  my($package,$filename,$line,$proc_name) = caller(0);

  my(%param) = @_;

  $return_value = 0;

  printf STDERR ">%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};

  if(!exists($main::options{company_tag}))
    {
      die "I need at least the company tag.";
    }

  my($company_tag) = $main::options{company_tag};
  my($pure_company_tag);

  %month_name2no =
    ('Jan' =>  1
    ,'Feb' =>  2
    ,'Mar' =>  3
    ,'Apr' =>  4
    ,'May' =>  5
    ,'Jun' =>  6
    ,'Jul' =>  7
    ,'Aug' =>  8
    ,'Sep' =>  9
    ,'Oct' => 10
    ,'Nov' => 11
    ,'Dec' => 12
    );

  $total_work::min = 0;

  open(TBL,">$ENV{'HOME'}/diary.month-tbl") || die "cannot open month tbl: $! -";

  my($total_min_today) = 0;
  my( $work_min_today) = 0;
  my($day_separator) = '';

  # within this loop quite some `local'-s are being used,
  # because this procedure was originally written in perl4;

  while (<>)
    {
      chop;

      my($other_tags);

      if (m/^(\d\d) (\w\w\w) (\d\d\d\d)/)
	{
	  $this_day     = $_;
	  $day_of_month = $1;
	  $month        = $month_name2no{$2};
	  $year         = $3;

	  if (0 && $main::options{debug})
	    {
	      printf STDERR "=%d: %s=>'%s',%s=>%d\n",__LINE__
		,'$this_day',$this_day
		,'$day_of_month',$day_of_month
		;
	    }

	  print $_,"\n" if $main::options{echo_the_source_p};

	  $total_min_today = 0;
	  $work_min_today  = 0;
	  print TBL $day_separator;
	  $day_separator = "_\n";
	}

      elsif (m/^\t(\d\d):(\d\d) \.\. (\d\d):(\d\d)=(\w\w):(\w\w)=(\w\w):(\w\w)\+(\d\d):(\d\d)--S:\w\w\w:\w\w\((\w\w\w)\) \[(work\@$company_tag(,.+)?)\]$/)
	{
	  local($start_hh,$start_mm) = ( $1, $2); local($start_min) = $start_hh * 60 + $start_mm;
	  local($end_hh  ,$end_mm  ) = ( $3, $4); local($end_min  ) = $end_hh   * 60 + $end_mm;
	  local($total_hh,$total_mm) = ( $5, $6);
	  local($work_hh ,$work_mm ) = ( $7, $8);
	  local($break_hh,$break_mm) = ( $9,$10);
	  local($target_hhh        ) = ($11    );
	  local($work_AT           ) = ($12);

	  my($other_tags_dummy,$other_tags_separator);

	  ($pure_company_tag,$other_tags_dummy,$other_tags_separator,$other_tags) =
	    $work_AT =~ m/^work\@([^,]+)((,)(.+))?$/;

	  if(defined($other_tags_dummy))
	    {
	      $other_tags_alt_separator = '|';
	      $other_tags           	=~ s/,/|/g;
	    }
	  else
	    {
	      $other_tags_dummy         = '';
	      $other_tags_alt_separator = '';
	      $other_tags           	= '';
	    }

	  local($total_min__computed) = $end_min - $start_min;

	  if ("$total_hh:$total_mm" eq 'hh:mm') # concerns `total' time
	    {
	    }
	  else
	    {
	      local($total_min) = $total_hh * 60 + $total_mm;

	      if(   $main::options{complain_about_manual_computing}
		 && ($total_min__computed != $total_min)
		 )
		{
		  printf STDERR "=%d: %s=>%d,%s=>%d,%s=>%d\n",__LINE__
		    ,'$.',$.
		    ,'$total_min__computed',$total_min__computed
		    ,'$total_min'          ,$total_min
		    ;
		  warn "manual computing is not that easy ... - sum";
		}
	    }

	  local($total_min) = $total_min__computed;
	  $total_min_today += $total_min;

	  local($break_min)  = $break_hh  * 60 + $break_mm;

	  local($work_min__computed) = $total_min__computed - $break_min;

	  if ("$work_hh:$work_mm" eq 'hh:mm') # concerns `work' time
	    {
	    }
	  else
	    {
	      local($work_min)   = $work_hh   * 60 + $work_mm ;

	      if  (   (($work_min+$break_min) != $total_min)
		   && $main::options{complain_about_manual_computing}
		   )
		{
		  printf STDERR "=%d: %s=>%d,%s=>%d,%s=>%d,%s=>%d\n",__LINE__
		    ,'$.',$.
		    ,'$work_min' ,$work_min
		    ,'$break_min',$break_min
		    ,'$total_min',$total_min
		    ;
		  warn "manual computing is not that easy ... - sum-break";
		}
	    }

	  local($work_min) = $work_min__computed;

	  $work_min_today  += $work_min;

	  $total_work::min += $work_min;

	  printf STDERR
	    ( "%04.4d-%02.2d-%02.2d"
	     ."|%02.2d:%02.2d|%02.2d:%02.2d"
	     ."|%s|%s"		# total
	     ."|%s|%s|%4.4d"	# worked
	     ."|%s%s%s\n"
	     )

	    ,$year,$month,$day_of_month

	    ,$start_hh,$start_mm,$end_hh ,$end_mm

	    ,&aux::min_2_hh_mm($total_min)
	    ,&aux::min_2_hh_mm($total_min_today)

	    ,&aux::min_2_hh_mm($work_min)
	    ,&aux::min_2_hh_mm($work_min_today)
	    ,$work_min

	    ,$this_day
	    ,$other_tags_alt_separator
	    ,$other_tags
	    ;

	  &diary_work_at::proc_entry
	    ( 'fh_tbl' => \*TBL

	    , 'year' => $year , 'month' => $month , 'day_of_month' => $day_of_month

	    , 'start_hh' => $start_hh , 'start_mm' => $start_mm
	    ,   'end_hh' =>   $end_hh ,   'end_mm' =>   $end_mm

	    , 'total_min'       => $total_min
	    , 'total_min_today' => $total_min_today

	    ,  'work_min'       =>  $work_min
	    ,  'work_min_today' =>  $work_min_today

	    , 'other_tags_alt_separator' => $other_tags_alt_separator
	    , 'other_tags'               => $other_tags
	    ) if 1;

	  printf TBL
	    ( "%04.4d-%02.2d-%02.2d"
	     ."|%02.2d:%02.2d|%02.2d:%02.2d"
	     ."|%s|%s"
	     ."|%s|%s|%4.4d"
	     ."%s%s\n"
	     )

	    ,$year,$month,$day_of_month

	    ,$start_hh,$start_mm,$end_hh ,$end_mm

	    ,&aux::min_2_hh_mm($total_min)
	    ,&aux::min_2_hh_mm($total_min_today)

	    ,&aux::min_2_hh_mm($work_min)
	    ,&aux::min_2_hh_mm($work_min_today)
	    ,$work_min

	    ,$other_tags_alt_separator
	    ,$other_tags
	    if 0;

	  printf
	    "\t%02.2d:%02.2d .. %02.2d:%02.2d=%s=%s+%02.2d:%02.2d--S:%s(%s) [%s%s]\n"
	    ,$start_hh,$start_mm,$end_hh ,$end_mm
	    ,&aux::min_2_hh_mm($total_min)
	    ,&aux::min_2_hh_mm($work_min)
	    ,$break_hh,$break_mm
	    ,&aux::min_2_hhh_mm($total_work::min)
	    ,$target_hhh
	    ,"work\@${pure_company_tag}"
	    ,$other_tags_dummy
	    if $main::options{echo_the_source_p};
	}

      # when does this match???

      elsif (m/^\t\w\w:\w\w \.\. \w\w:\w\w=(\w\w):(\w\w)=(\w\w):(\w\w)\+\d\d:\d\d--S:\w\w\w:\m\m\(\w\w\w\) \[work\@$company_tag(,.+)?\]$/)
	{
	  print $_,"\n" if $main::options{echo_the_source_p};
	}

      elsif (m/work\@$company_tag/)
	{
	  printf STDERR "=%d: %s=>%d,%s=>'%s' // %s\n",__LINE__
	    ,'$.',$.
	    ,'$_',$_
	    ,"mysteriously matching [work\@${company_tag}]"
	    ;
	  print $_,"\n" if $main::options{echo_the_source_p};
	}
      else
	{
	  print $_,"\n" if $main::options{echo_the_source_p};
	}
    }

  if (1)
    {
      printf STDERR "=%d: %s=>%04.4d,%s=>%s\n",__LINE__
	,'$total_work::min',$total_work::min
	,'$total_work::{hh,mm}' ,&aux::min_2_hhh_mm($total_work::min)
	;
      printf TBL
	"=\n|||||%s|%s|%4.4d\n"
	,&aux::min_2_hh_mm($total_work::min)
	,&aux::min_2_hh_mm($total_work::min)
	,$total_work::min
	;
      printf TBL ".\\\" =%d: %s=>%04.4d,%s=>%s // %s\n",__LINE__
	,'$total_work::min',$total_work::min
	,'$total_work::{hh,mm}',&aux::min_2_hhh_mm($total_work::min)
	,&aux::min_2_hhh_mm($total_work::min)
	if 0;
    }

  close(TBL);

  printf STDERR "=%s,%d,%s: %s=>{%s}\n",__FILE__,__LINE__,$proc_name
    ,'$return_value',$return_value
    if 0 && $main::options{debug};
  printf STDERR "<%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};

  return $return_value;
}
#
sub job_old_work_at
{
  my($package,$filename,$line,$proc_name) = caller(0);

  my(%param) = @_;

  $return_value = 0;

  printf STDERR ">%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};

  if(!exists($main::options{company_tag}))
    {
      die "I need at least the company tag.";
    }

  my($company_tag) = $main::options{company_tag};
  my($pure_company_tag);

  %month_name2no =
    ('Jan'  =>  1
     ,'Feb' =>  2
     ,'Mar' =>  3
     ,'Apr' =>  4
     ,'May' =>  5
     ,'Jun' =>  6
     ,'Jul' =>  7
     ,'Aug' =>  8
     ,'Sep' =>  9
     ,'Oct' => 10
     ,'Nov' => 11
     ,'Dec' => 12
     );

  $total_work::min = 0;

  open(TBL,">$ENV{'HOME'}/diary.month-tbl") || die "cannot open month tbl: $! -";

  my($total_min_today) = 0;
  my( $work_min_today) = 0;
  my($day_separator) = '';

  # within this loop quite some `local'-s are being used,
  # because this procedure was originally written in perl4;

  while (<>)
    {
      chop;

      my($other_tags);

      if (m/^(\d\d) (\w\w\w) (\d\d\d\d)/)
	{
	  $this_day     = $_;
	  $day_of_month = $1;
	  $month        = $month_name2no{$2};
	  $year         = $3;

	  if (0 && $main::options{debug})
	    {
	      printf STDERR "=%d: %s=>'%s',%s=>%d\n",__LINE__
		,'$this_day',$this_day
		,'$day_of_month',$day_of_month
		;
	    }

	  print $_,"\n" if $main::options{echo_the_source_p};

	  $total_min_today = 0;
	  $work_min_today  = 0;
	  print TBL $day_separator;
	  $day_separator = "_\n";
	}

      elsif (m/^\t(\d\d):(\d\d) \.\. (\d\d):(\d\d)=(\w\w):(\w\w)=(\w\w):(\w\w)\+(\d\d):(\d\d)--S:\w\w\w:\w\w\((\w\w\w)\) \[(work\@$company_tag(,.+)?)\]$/)
	{
	  local($start_hh,$start_mm) = ( $1, $2); local($start_min) = $start_hh * 60 + $start_mm;
	  local($end_hh  ,$end_mm  ) = ( $3, $4); local($end_min  ) = $end_hh   * 60 + $end_mm;
	  local($total_hh,$total_mm) = ( $5, $6);
	  local($work_hh ,$work_mm ) = ( $7, $8);
	  local($break_hh,$break_mm) = ( $9,$10);
	  local($target_hhh        ) = ($11    );
	  local($work_AT           ) = ($12);

	  my($other_tags_dummy,$other_tags_separator);

	  ($pure_company_tag,$other_tags_dummy,$other_tags_separator,$other_tags) =
	    $work_AT =~ m/^work\@([^,]+)((,)(.+))?$/;

	  if(defined($other_tags_dummy))
	    {
	      $other_tags_alt_separator = '|';
	      $other_tags           	=~ s/,/|/g;
	    }
	  else
	    {
	      $other_tags_dummy         = '';
	      $other_tags_alt_separator = '';
	      $other_tags           	= '';
	    }

	  local($total_min__computed) = $end_min - $start_min;

	  if ("$total_hh:$total_mm" eq 'hh:mm') # concerns `total' time
	    {
	    }
	  else
	    {
	      local($total_min) = $total_hh * 60 + $total_mm;

	      if(   $main::options{complain_about_manual_computing}
		 && ($total_min__computed != $total_min)
		 )
		{
		  printf STDERR "=%d: %s=>%d,%s=>%d,%s=>%d\n",__LINE__
		    ,'$.',$.
		    ,'$total_min__computed',$total_min__computed
		    ,'$total_min'          ,$total_min
		    ;
		  warn "manual computing is not that easy ... - sum";
		}
	    }

	  local($total_min) = $total_min__computed;
	  $total_min_today += $total_min;

	  local($break_min)  = $break_hh  * 60 + $break_mm;

	  local($work_min__computed) = $total_min__computed - $break_min;

	  if ("$work_hh:$work_mm" eq 'hh:mm') # concerns `work' time
	    {
	    }
	  else
	    {
	      local($work_min)   = $work_hh   * 60 + $work_mm ;

	      if  (   (($work_min+$break_min) != $total_min)
		   && $main::options{complain_about_manual_computing}
		   )
		{
		  printf STDERR "=%d: %s=>%d,%s=>%d,%s=>%d,%s=>%d\n",__LINE__
		    ,'$.',$.
		    ,'$work_min' ,$work_min
		    ,'$break_min',$break_min
		    ,'$total_min',$total_min
		    ;
		  warn "manual computing is not that easy ... - sum-break";
		}
	    }

	  local($work_min) = $work_min__computed;

	  $work_min_today  += $work_min;

	  $total_work::min += $work_min;

	  printf STDERR
	    ( "%04.4d-%02.2d-%02.2d"
	     ."|%02.2d:%02.2d|%02.2d:%02.2d"
	     ."|%s|%s"		# total
	     ."|%s|%s|%4.4d"	# worked
	     ."|%s%s%s\n"
	     )

	    ,$year,$month,$day_of_month

	    ,$start_hh,$start_mm,$end_hh ,$end_mm

	    ,&aux::min_2_hh_mm($total_min)
	    ,&aux::min_2_hh_mm($total_min_today)

	    ,&aux::min_2_hh_mm($work_min)
	    ,&aux::min_2_hh_mm($work_min_today)
	    ,$work_min

	    ,$this_day
	    ,$other_tags_alt_separator
	    ,$other_tags
	    ;

	  printf TBL
	    ( "%04.4d-%02.2d-%02.2d"
	     ."|%02.2d:%02.2d|%02.2d:%02.2d"
	     ."|%s|%s"
	     ."|%s|%s|%4.4d"
	     ."%s%s\n"
	     )

	    ,$year,$month,$day_of_month

	    ,$start_hh,$start_mm,$end_hh ,$end_mm

	    ,&aux::min_2_hh_mm($total_min)
	    ,&aux::min_2_hh_mm($total_min_today)

	    ,&aux::min_2_hh_mm($work_min)
	    ,&aux::min_2_hh_mm($work_min_today)
	    ,$work_min

	    ,$other_tags_alt_separator
	    ,$other_tags
	    ;

	  printf
	    "\t%02.2d:%02.2d .. %02.2d:%02.2d=%s=%s+%02.2d:%02.2d--S:%s(%s) [%s%s]\n"
	    ,$start_hh,$start_mm,$end_hh ,$end_mm
	    ,&aux::min_2_hh_mm($total_min)
	    ,&aux::min_2_hh_mm($work_min)
	    ,$break_hh,$break_mm
	    ,&aux::min_2_hhh_mm($total_work::min)
	    ,$target_hhh
	    ,"work\@${pure_company_tag}"
	    ,$other_tags_dummy
	    if $main::options{echo_the_source_p};
	}

      # when does this match???

      elsif (m/^\t\w\w:\w\w \.\. \w\w:\w\w=(\w\w):(\w\w)=(\w\w):(\w\w)\+\d\d:\d\d--S:\w\w\w:\m\m\(\w\w\w\) \[work\@$company_tag(,.+)?\]$/)
	{
	  print $_,"\n" if $main::options{echo_the_source_p};
	}

      elsif (m/work\@$company_tag/)
	{
	  printf STDERR "=%d: %s=>%d,%s=>'%s' // %s\n",__LINE__
	    ,'$.',$.
	    ,'$_',$_
	    ,"mysteriously matching [work\@${company_tag}]"
	    ;
	  print $_,"\n" if $main::options{echo_the_source_p};
	}
      else
	{
	  print $_,"\n" if $main::options{echo_the_source_p};
	}
    }

  if (1)
    {
      printf STDERR "=%d: %s=>%04.4d,%s=>%s\n",__LINE__
	,'$total_work::min',$total_work::min
	,'$total_work::{hh,mm}' ,&aux::min_2_hhh_mm($total_work::min)
	;
      printf TBL
	"=\n|||||%s|%s|%4.4d\n"
	,&aux::min_2_hh_mm($total_work::min)
	,&aux::min_2_hh_mm($total_work::min)
	,$total_work::min
	;
      printf TBL ".\\\" =%d: %s=>%04.4d,%s=>%s // %s\n",__LINE__
	,'$total_work::min',$total_work::min
	,'$total_work::{hh,mm}',&aux::min_2_hhh_mm($total_work::min)
	,&aux::min_2_hhh_mm($total_work::min)
	if 0;
    }

  close(TBL);

  printf STDERR "=%s,%d,%s: %s=>{%s}\n",__FILE__,__LINE__,$proc_name
    ,'$return_value',$return_value
    if 0 && $main::options{debug};
  printf STDERR "<%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};

  return $return_value;
}
#
sub job_yearly_events
{
  my($package,$filename,$line,$proc_name) = caller(0);

  my(%param) = @_;

  $return_value = 0;

  printf STDERR ">%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};

  ##################################################
  # may only be applied to the region within diary,
  # where we find the yearly events;
  ##################################################

  @short_month_names =
    ( 'Jan','Feb','Mar','Apr','May','Jun'
     ,'Jul','Aug','Sep','Oct','Nov','Dec'
     );
  unshift(@short_month_names,''); # in order to have an easier mapping `no : name`

  %month_names__long2short =
    ( 'January'   => 'Jan'
     ,'February'  => 'Feb'
     ,'March'     => 'Mar'
     ,'April'     => 'Apr'
     ,'May'       => 'May'
     ,'June'      => 'Jun'
     ,'July'      => 'Jul'
     ,'August'    => 'Aug'
     ,'September' => 'Sep'
     ,'October'   => 'Oct'
     ,'November'  => 'Nov'
     ,'December'  => 'Dec'
     );

  while(<>)
    {
      chomp;

      my($year,$month,$day,$text);
      my($long_month_name);

      if(($day,$month,$year,$text) = m/^%%\(diary-anniversary\s+(\d+)\s+(\d+)\s+(\d+)\)\s*(.*)$/)
	{
	  my($short_month_name) = $short_month_names[$month];

	  $text =~ s/\s*:\s*/: /;

	  printf "%02.2d %s %s\n\thh:mm %s\n"
	    ,$day
	    ,$short_month_name
	    ,$options{this_year}
	    ,$text
	    ;
	}
      elsif(m/^\s*$/)
	{
	}
      elsif(($day,$long_month_name,$text) = m/^(\d+)\s+(\S+)\s+(.+)$/)
	{
	  $text =~ s/\s*:\s*/: /;

	  printf "%02.2d %s %s\n\thh:mm %s\n"
	    ,$day
	    , $month_names__long2short{$long_month_name}
	    ,$options{this_year}
	    ,$text
	    ;
	}
      else
	{
	  warn;
	}
    }

  printf STDERR "=%s,%d,%s: %s=>{%s}\n",__FILE__,__LINE__,$proc_name
    ,'$return_value',$return_value
    if 0 && $main::options{debug};
  printf STDERR "<%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};

  return $return_value;
}
#
package aux;

sub min_2_hhh_mm
{
  my($package,$filename,$line,$proc_name) = caller(0);

  #my(%param) = @_;
  my($min) = @_;

  $return_value = 0;

  printf STDERR ">%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};
  printf STDERR "=%s,%d,%s: %s=>{%s}\n",__FILE__,__LINE__,$proc_name
    ,'$file_name',$file_name
      if 0 && $main::options{debug};

  &discard_unused_variables($file_name) if 0;

  my($mm) =  $min        % 60;
  my($hh) = ($min - $mm) / 60;

  $return_value = sprintf "%03.3d:%02.2d",$hh,$mm;

  printf STDERR "<%s,%d,%s: %s=>%d\n",__FILE__,__LINE__,$proc_name
    ,'$return_value',$return_value
    if 0 && $main::options{debug};

  return $return_value;
}
#
sub min_2_hh_mm
{
  my($package,$filename,$line,$proc_name) = caller(0);

  #my(%param) = @_;
  my($min) = @_;

  $return_value = 0;

  printf STDERR ">%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};
  printf STDERR "=%s,%d,%s: %s=>{%s}\n",__FILE__,__LINE__,$proc_name
    ,'$file_name',$file_name
      if 0 && $main::options{debug};

  &discard_unused_variables($file_name) if 0;

  my($mm) =  $min        % 60;
  my($hh) = ($min - $mm) / 60;

  $return_value = sprintf "%02.2d:%02.2d",$hh,$mm;

  printf STDERR "<%s,%d,%s: %s=>%d\n",__FILE__,__LINE__,$proc_name
    ,'$return_value',$return_value
    if 0 && $main::options{debug};

  return $return_value;
}
#
package diary_work_at;

sub proc_entry
{
  my($package,$filename,$line,$proc_name) = caller(0);

  my(%param) = @_;

  $return_value = 0;

  printf STDERR ">%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};

  my($fh_tbl) = $param{fh_tbl};

  printf
     $fh_tbl			# perl5 does not allow me to replace this by $param{fh_tbl}

      "%04.4d-%02.2d-%02.2d"
    . "|%02.2d:%02.2d|%02.2d:%02.2d"
    . "|%s|%s"
    . "|%s|%s|%4.4d"
    . "%s%s\n"

    ,$param{year},$param{month},$param{day_of_month}
    
    ,$param{start_hh},$param{start_mm}
    ,$param{  end_hh},$param{  end_mm}
    
    ,&aux::min_2_hh_mm($param{total_min      })
    ,&aux::min_2_hh_mm($param{total_min_today})
    
    ,&aux::min_2_hh_mm($param{work_min      })
    ,&aux::min_2_hh_mm($param{work_min_today})
    ,                  $param{work_min      }
    
    ,$param{other_tags_alt_separator}
    ,$param{other_tags}
    ;

  printf STDERR "<%s,%d,%s: %s=>%d\n",__FILE__,__LINE__,$proc_name
    ,'$return_value',$return_value
    if 0 && $main::options{debug};

  return $return_value;
}
#
package local_templates;

sub aux_
{
  my($package,$filename,$line,$proc_name) = caller(0);

  my(%param) = @_;

  $return_value = 0;

  printf STDERR ">%s,%d,%s\n",__FILE__,__LINE__,$proc_name
    if 0 && $main::options{debug};
  printf STDERR "=%s,%d,%s: %s=>{%s}\n",__FILE__,__LINE__,$proc_name
    ,'$file_name',$file_name
      if 0 && $main::options{debug};

  &discard_unused_variables($file_name) if 0;

  printf STDERR "<%s,%d,%s: %s=>%d\n",__FILE__,__LINE__,$proc_name
    ,'$return_value',$return_value
    if 0 && $main::options{debug};

  return $return_value;
}
